/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var musje = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"0":29,"error":2,"e":3,"maybe_musje":4,"EOF":5,"space":6,"maybe_space":7,"musje":8,"S":9,"NL":10,"score_head":11,"part_list":12,"title":13,"TITLE":14,"COMPOSER":15,"part":16,"measure_list":17,"bar":18,"measure":19,"music_data":20,"|":21,"||":22,"|]":23,"|:":24,":|":25,":|:":26,"slurable":27,"TIE":28,"maybe_duration":30,"voice":31,"time_signature":32,"pitchful":33,"(":34,")":35,"note":36,"chord":37,"pitch":38,"STEP":39,"OCTAVE":40,"ACCIDENTAL":41,"type_modifier":42,"DOT":43,"_":44,"=":45,"HALF":46,"WHOLE":47,"<":48,"pitch_list":49,">":50,"{":51,"voice_list":52,"}":53,"voice_data_list":54,":":55,"voice_data":56,"restslurable_list":57,"BEATS":58,"BEAT_TYPE":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"S",10:"NL",14:"TITLE",15:"COMPOSER",21:"|",22:"||",23:"|]",24:"|:",25:":|",26:":|:",28:"TIE",29:"0",34:"(",35:")",39:"STEP",40:"OCTAVE",41:"ACCIDENTAL",43:"DOT",44:"_",45:"=",46:"HALF",47:"WHOLE",48:"<",50:">",51:"{",53:"}",54:"voice_data_list",55:":",57:"restslurable_list",58:"BEATS",59:"BEAT_TYPE"},
productions_: [0,[3,2],[4,0],[4,2],[4,3],[4,1],[6,1],[6,1],[7,0],[7,2],[7,2],[8,1],[8,1],[8,2],[11,2],[13,1],[13,2],[12,1],[16,1],[16,3],[17,1],[17,4],[17,3],[19,2],[19,3],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[20,1],[20,2],[20,2],[20,1],[20,1],[27,2],[27,3],[27,3],[33,1],[33,1],[36,1],[38,1],[38,2],[38,2],[38,3],[30,0],[30,1],[30,1],[30,2],[42,1],[42,1],[42,2],[42,2],[42,3],[42,3],[42,1],[42,1],[37,3],[49,1],[49,2],[31,3],[52,1],[52,3],[56,1],[56,2],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = null; 
break;
case 3: this.$ = null; 
break;
case 4: this.$ = $$[$0]; removeLastEmptyMeasure($$[$0]); 
break;
case 5: this.$ = $$[$0]; removeLastEmptyMeasure($$[$0]); 
break;
case 10: this.$ = $$[$0-1] ? $$[$0-1] + 1 : 1; 
break;
case 11: this.$ = { head: $$[$0] }; 
break;
case 12: this.$ = { parts: $$[$0] }; 
break;
case 13: this.$ = { head: $$[$0-1], parts: $$[$0] }; 
break;
case 15: this.$ = { title: $$[$0] }; 
break;
case 16: this.$ =  { title: $$[$0-1], composer: $$[$0] }; 
break;
case 17: this.$ = [$$[$0]]; 
break;
case 18: this.$ = { measures: $$[$0]}; 
break;
case 19: this.$ = { measures: $$[$0]}; $$[$0][0].unshift({ bar: $$[$0-2] }); 
break;
case 20: this.$ = [$$[$0]]; 
break;
case 21: this.$ = $$[$0-3]; lastItem($$[$0-3]).push({ bar: $$[$0-2] }); $$[$0-3].push($$[$0]); 
break;
case 22: this.$ = $$[$0-2]; lastItem($$[$0-2]).push({ bar: $$[$0-1] }); $$[$0-2].push([]); 
break;
case 23: this.$ = [$$[$0-1]]; 
break;
case 24: this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1]); 
break;
case 25: this.$ = 'single'; 
break;
case 26: this.$ = 'double'; 
break;
case 27: this.$ = 'end'; 
break;
case 28: this.$ = 'repeat-begin'; 
break;
case 29: this.$ = 'repeat-end'; 
break;
case 30: this.$ = 'repeat-both'; 
break;
case 32: this.$ = $$[$0-1]; onlyProperty($$[$0-1]).duration.tie = true; 
break;
case 33: this.$ = { rest: { duration: $$[$0] } }; 
break;
case 34: this.$ = { voice: $$[$0] }; 
break;
case 36: this.$ = $$[$0-1]; onlyProperty($$[$0-1]).duration = $$[$0]; 
break;
case 37:
      this.$ = $$[$0-1];
      extend(onlyProperty($$[$0-1]), {
        duration: $$[$0],
        slur: ['begin']
      });
    
break;
case 38:
      this.$ = $$[$0-2];
      extend(onlyProperty($$[$0-2]), {
        duration: $$[$0-1],
        slur: ['end']
      });
    
break;
case 39: this.$ = { note: $$[$0] }; 
break;
case 40: this.$ = { chord: $$[$0] }; 
break;
case 41: this.$ = { pitch: $$[$0] }; 
break;
case 42: this.$ = { step: +$$[$0] }; 
break;
case 43: this.$ = { step: +$$[$0-1], octave: octave($$[$0]) }; 
break;
case 44: this.$ = { accidental: $$[$0-1], step: +$$[$0] }; 
break;
case 45: this.$ = { accidental: $$[$0-2], step: +$$[$0-1], octave: octave($$[$0]) }; 
break;
case 46: this.$ = { type: 4 }; 
break;
case 47: this.$ = { type: $$[$0] }; 
break;
case 48: this.$ = { type: 4, dot: $$[$0].length }; 
break;
case 49: this.$ = { type: $$[$0-1], dot: $$[$0].length }; 
break;
case 50: this.$ = 8; 
break;
case 51: this.$ = 16; 
break;
case 52: this.$ = 32; 
break;
case 53: this.$ = 64; 
break;
case 54: this.$ = 128; 
break;
case 55: this.$ = 256; 
break;
case 56: this.$ = 2; 
break;
case 57: this.$ = 1; 
break;
case 58: this.$ = { pitches: $$[$0-1] }; 
break;
case 59: this.$ = [$$[$0]]; 
break;
case 60: this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 61: this.$ = $$[$0-1]; 
break;
case 62: this.$ = [$$[$0]]; 
break;
case 63: this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1]); 
break;
case 65: this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 66: this.$ = { time: { beats: +$$[$0-1], beatType: +$$[$0] } }; 
break;
}
},
table: [{3:1,4:2,5:[2,2],6:3,8:4,9:[1,5],10:[1,6],11:7,12:8,13:9,14:[1,11],16:10,17:12,18:13,19:14,20:21,21:[1,15],22:[1,16],23:[1,17],24:[1,18],25:[1,19],26:[1,20],27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{1:[3]},{5:[1,36]},{5:[2,8],7:37,9:[2,8],10:[2,8],14:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],34:[2,8],39:[2,8],41:[2,8],48:[2,8],51:[2,8],58:[2,8]},{5:[2,5]},{5:[2,6],9:[2,6],10:[2,6],14:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],29:[2,6],34:[2,6],39:[2,6],41:[2,6],48:[2,6],51:[2,6],58:[2,6]},{5:[2,7],9:[2,7],10:[2,7],14:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],29:[2,7],34:[2,7],39:[2,7],41:[2,7],48:[2,7],51:[2,7],58:[2,7]},{5:[2,11],12:38,16:10,17:12,18:13,19:14,20:21,21:[1,15],22:[1,16],23:[1,17],24:[1,18],25:[1,19],26:[1,20],27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{5:[2,12]},{5:[2,8],7:39,9:[2,8],10:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],34:[2,8],39:[2,8],41:[2,8],48:[2,8],51:[2,8],58:[2,8]},{5:[2,17]},{5:[2,15],9:[2,15],10:[2,15],15:[1,40],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],29:[2,15],34:[2,15],39:[2,15],41:[2,15],48:[2,15],51:[2,15],58:[2,15]},{5:[2,18],18:41,21:[1,15],22:[1,16],23:[1,17],24:[1,18],25:[1,19],26:[1,20]},{7:42,9:[2,8],10:[2,8],29:[2,8],34:[2,8],39:[2,8],41:[2,8],48:[2,8],51:[2,8],58:[2,8]},{5:[2,20],20:43,21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{5:[2,25],9:[2,25],10:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],29:[2,25],34:[2,25],39:[2,25],41:[2,25],48:[2,25],51:[2,25],58:[2,25]},{5:[2,26],9:[2,26],10:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],29:[2,26],34:[2,26],39:[2,26],41:[2,26],48:[2,26],51:[2,26],58:[2,26]},{5:[2,27],9:[2,27],10:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],29:[2,27],34:[2,27],39:[2,27],41:[2,27],48:[2,27],51:[2,27],58:[2,27]},{5:[2,28],9:[2,28],10:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],29:[2,28],34:[2,28],39:[2,28],41:[2,28],48:[2,28],51:[2,28],58:[2,28]},{5:[2,29],9:[2,29],10:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],29:[2,29],34:[2,29],39:[2,29],41:[2,29],48:[2,29],51:[2,29],58:[2,29]},{5:[2,30],9:[2,30],10:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],29:[2,30],34:[2,30],39:[2,30],41:[2,30],48:[2,30],51:[2,30],58:[2,30]},{5:[2,8],7:44,9:[2,8],10:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],34:[2,8],39:[2,8],41:[2,8],48:[2,8],51:[2,8],58:[2,8]},{5:[2,31],9:[2,31],10:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],28:[1,45],29:[2,31],34:[2,31],39:[2,31],41:[2,31],48:[2,31],51:[2,31],58:[2,31]},{5:[2,46],9:[2,46],10:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],29:[2,46],30:46,34:[2,46],39:[2,46],41:[2,46],42:47,43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[2,46],51:[2,46],58:[2,46]},{5:[2,34],9:[2,34],10:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],29:[2,34],34:[2,34],39:[2,34],41:[2,34],48:[2,34],51:[2,34],58:[2,34]},{5:[2,35],9:[2,35],10:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],29:[2,35],34:[2,35],39:[2,35],41:[2,35],48:[2,35],51:[2,35],58:[2,35]},{5:[2,46],9:[2,46],10:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],28:[2,46],29:[2,46],30:53,34:[2,46],35:[2,46],39:[2,46],41:[2,46],42:47,43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[2,46],51:[2,46],53:[2,46],58:[2,46]},{33:54,36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33]},{52:55,54:[1,56]},{59:[1,57]},{5:[2,39],9:[2,39],10:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],28:[2,39],29:[2,39],34:[2,39],35:[2,39],39:[2,39],41:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],51:[2,39],53:[2,39],58:[2,39]},{5:[2,40],9:[2,40],10:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],28:[2,40],29:[2,40],34:[2,40],35:[2,40],39:[2,40],41:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],51:[2,40],53:[2,40],58:[2,40]},{5:[2,41],9:[2,41],10:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],28:[2,41],29:[2,41],34:[2,41],35:[2,41],39:[2,41],41:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],51:[2,41],53:[2,41],58:[2,41]},{38:59,39:[1,34],41:[1,35],49:58},{5:[2,42],9:[2,42],10:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],28:[2,42],29:[2,42],34:[2,42],35:[2,42],39:[2,42],40:[1,60],41:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],50:[2,42],51:[2,42],53:[2,42],58:[2,42]},{39:[1,61]},{1:[2,1]},{5:[2,3],8:62,9:[1,63],10:[1,64],11:7,12:8,13:9,14:[1,11],16:10,17:12,18:13,19:14,20:21,21:[1,15],22:[1,16],23:[1,17],24:[1,18],25:[1,19],26:[1,20],27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{5:[2,13]},{5:[2,14],9:[1,63],10:[1,64],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],29:[2,14],34:[2,14],39:[2,14],41:[2,14],48:[2,14],51:[2,14],58:[2,14]},{5:[2,16],9:[2,16],10:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],29:[2,16],34:[2,16],39:[2,16],41:[2,16],48:[2,16],51:[2,16],58:[2,16]},{5:[2,8],7:65,9:[2,8],10:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],34:[2,8],39:[2,8],41:[2,8],48:[2,8],51:[2,8],58:[2,8]},{9:[1,63],10:[1,64],17:66,19:14,20:21,27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{5:[2,8],7:67,9:[2,8],10:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],34:[2,8],39:[2,8],41:[2,8],48:[2,8],51:[2,8],58:[2,8]},{5:[2,23],9:[1,63],10:[1,64],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],29:[2,23],34:[2,23],39:[2,23],41:[2,23],48:[2,23],51:[2,23],58:[2,23]},{5:[2,32],9:[2,32],10:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],29:[2,32],34:[2,32],39:[2,32],41:[2,32],48:[2,32],51:[2,32],58:[2,32]},{5:[2,33],9:[2,33],10:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],29:[2,33],34:[2,33],39:[2,33],41:[2,33],48:[2,33],51:[2,33],58:[2,33]},{5:[2,47],9:[2,47],10:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],28:[2,47],29:[2,47],34:[2,47],35:[2,47],39:[2,47],41:[2,47],43:[1,68],48:[2,47],51:[2,47],53:[2,47],58:[2,47]},{5:[2,48],9:[2,48],10:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],28:[2,48],29:[2,48],34:[2,48],35:[2,48],39:[2,48],41:[2,48],48:[2,48],51:[2,48],53:[2,48],58:[2,48]},{5:[2,50],9:[2,50],10:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],28:[2,50],29:[2,50],34:[2,50],35:[2,50],39:[2,50],41:[2,50],43:[2,50],48:[2,50],51:[2,50],53:[2,50],58:[2,50]},{5:[2,51],9:[2,51],10:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],28:[2,51],29:[2,51],34:[2,51],35:[2,51],39:[2,51],41:[2,51],43:[2,51],44:[1,69],45:[1,70],48:[2,51],51:[2,51],53:[2,51],58:[2,51]},{5:[2,56],9:[2,56],10:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],28:[2,56],29:[2,56],34:[2,56],35:[2,56],39:[2,56],41:[2,56],43:[2,56],48:[2,56],51:[2,56],53:[2,56],58:[2,56]},{5:[2,57],9:[2,57],10:[2,57],21:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],28:[2,57],29:[2,57],34:[2,57],35:[2,57],39:[2,57],41:[2,57],43:[2,57],48:[2,57],51:[2,57],53:[2,57],58:[2,57]},{5:[2,36],9:[2,36],10:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],28:[2,36],29:[2,36],34:[2,36],35:[1,71],39:[2,36],41:[2,36],48:[2,36],51:[2,36],53:[2,36],58:[2,36]},{5:[2,46],9:[2,46],10:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],28:[2,46],29:[2,46],30:72,34:[2,46],39:[2,46],41:[2,46],42:47,43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[2,46],51:[2,46],53:[2,46],58:[2,46]},{53:[1,73]},{53:[2,62],55:[1,74]},{5:[2,66],9:[2,66],10:[2,66],21:[2,66],22:[2,66],23:[2,66],24:[2,66],25:[2,66],26:[2,66],29:[2,66],34:[2,66],39:[2,66],41:[2,66],48:[2,66],51:[2,66],58:[2,66]},{38:76,39:[1,34],41:[1,35],50:[1,75]},{39:[2,59],41:[2,59],50:[2,59]},{5:[2,43],9:[2,43],10:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],28:[2,43],29:[2,43],34:[2,43],35:[2,43],39:[2,43],41:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],50:[2,43],51:[2,43],53:[2,43],58:[2,43]},{5:[2,44],9:[2,44],10:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],28:[2,44],29:[2,44],34:[2,44],35:[2,44],39:[2,44],40:[1,77],41:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],50:[2,44],51:[2,44],53:[2,44],58:[2,44]},{5:[2,4]},{5:[2,9],9:[2,9],10:[2,9],14:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],29:[2,9],34:[2,9],39:[2,9],41:[2,9],48:[2,9],51:[2,9],58:[2,9]},{5:[2,10],9:[2,10],10:[2,10],14:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],29:[2,10],34:[2,10],39:[2,10],41:[2,10],48:[2,10],51:[2,10],58:[2,10]},{5:[2,22],9:[1,63],10:[1,64],19:78,20:21,21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{5:[2,19],18:41,21:[1,15],22:[1,16],23:[1,17],24:[1,18],25:[1,19],26:[1,20]},{5:[2,24],9:[1,63],10:[1,64],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],29:[2,24],34:[2,24],39:[2,24],41:[2,24],48:[2,24],51:[2,24],58:[2,24]},{5:[2,49],9:[2,49],10:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],28:[2,49],29:[2,49],34:[2,49],35:[2,49],39:[2,49],41:[2,49],48:[2,49],51:[2,49],53:[2,49],58:[2,49]},{5:[2,52],9:[2,52],10:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],28:[2,52],29:[2,52],34:[2,52],35:[2,52],39:[2,52],41:[2,52],43:[2,52],48:[2,52],51:[2,52],53:[2,52],58:[2,52]},{5:[2,53],9:[2,53],10:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],28:[2,53],29:[2,53],34:[2,53],35:[2,53],39:[2,53],41:[2,53],43:[2,53],44:[1,79],45:[1,80],48:[2,53],51:[2,53],53:[2,53],58:[2,53]},{5:[2,38],9:[2,38],10:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],28:[2,38],29:[2,38],34:[2,38],39:[2,38],41:[2,38],48:[2,38],51:[2,38],53:[2,38],58:[2,38]},{5:[2,37],9:[2,37],10:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],28:[2,37],29:[2,37],34:[2,37],39:[2,37],41:[2,37],48:[2,37],51:[2,37],53:[2,37],58:[2,37]},{5:[2,61],9:[2,61],10:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],29:[2,61],34:[2,61],39:[2,61],41:[2,61],48:[2,61],51:[2,61],58:[2,61]},{27:82,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],56:81,57:[1,83]},{5:[2,58],9:[2,58],10:[2,58],21:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],28:[2,58],29:[2,58],34:[2,58],35:[2,58],39:[2,58],41:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],51:[2,58],53:[2,58],58:[2,58]},{39:[2,60],41:[2,60],50:[2,60]},{5:[2,45],9:[2,45],10:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],28:[2,45],29:[2,45],34:[2,45],35:[2,45],39:[2,45],41:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],50:[2,45],51:[2,45],53:[2,45],58:[2,45]},{5:[2,21],20:43,21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:22,29:[1,23],31:24,32:25,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33],51:[1,28],58:[1,29]},{5:[2,54],9:[2,54],10:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],28:[2,54],29:[2,54],34:[2,54],35:[2,54],39:[2,54],41:[2,54],43:[2,54],48:[2,54],51:[2,54],53:[2,54],58:[2,54]},{5:[2,55],9:[2,55],10:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],28:[2,55],29:[2,55],34:[2,55],35:[2,55],39:[2,55],41:[2,55],43:[2,55],48:[2,55],51:[2,55],53:[2,55],58:[2,55]},{53:[2,63]},{53:[2,64]},{27:84,33:26,34:[1,27],36:30,37:31,38:32,39:[1,34],41:[1,35],48:[1,33]},{53:[2,65]}],
defaultActions: {4:[2,5],8:[2,12],10:[2,17],36:[2,1],38:[2,13],62:[2,4],81:[2,63],82:[2,64],84:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  // Polyfill
  if (!String.prototype.trim) {
    String.prototype.trim = function () {
      return this.replace(/^\s+|\s+$/gm, '');
    };
  }

  function lastItem(arr) { return arr[arr.length - 1]; }

  function extend(target, ext) {
    for (var key in ext) { target[key] = ext[key]; }
    return target;
  }

  function onlyProperty(obj) {
    for (var key in obj) {}
    return obj[key];
  }

  function octave(str) {
    var len = str.length;
    return str.charAt(0) === ',' ? -len : len;
  }

  function removeLastEmptyMeasure(score) {
    var parts = score.parts,
      lastMeasure;
    for (i = 0; i < parts.length; i++) {
      lastMeasure = lastItem(parts[i].measures);
      if (lastMeasure.length === 0) {
        parts[i].measures.pop();
      }
    }
  }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 9
break;
case 1:return 9
break;
case 2:return 9
break;
case 3: this.begin('title'); 
break;
case 4: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 3).trim();
                          return 14; 
break;
case 5: this.begin('INITIAL'); 
break;
case 6: this.begin('INITIAL');
                          yy_.yytext = yy_.yytext.trim();
                          return 15; 
break;
case 7: this.begin('time');
                          yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 1);
                          return 58; 
break;
case 8: this.begin('INITIAL'); return 59; 
break;
case 9:return 41
break;
case 10:return 39
break;
case 11:return 40
break;
case 12:return 43
break;
case 13:return 47
break;
case 14:return 46
break;
case 15:return 28
break;
case 16:return 44
break;
case 17:return 45
break;
case 18:return '.'
break;
case 19:return 29
break;
case 20:return 48
break;
case 21:return 50
break;
case 22:return 34
break;
case 23:return 35
break;
case 24:return '/'
break;
case 25:return '\\'
break;
case 26:return 23
break;
case 27:return 22
break;
case 28:return '[|'
break;
case 29:return 24
break;
case 30:return 26
break;
case 31:return 25
break;
case 32:return 21
break;
case 33:return 51
break;
case 34:return 53
break;
case 35:return 55
break;
case 36:return 10
break;
case 37:return 9
break;
case 38:return 5
break;
case 39:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\*([\s\S]*?)\*\/)/,/^(?:\/\*[\s\S]*)/,/^(?:<<<)/,/^(?:.*>>>)/,/^(?:([ \t])*([\n\r]))/,/^(?:.*)/,/^(?:(([1-9]\d{0,2})\/))/,/^(?:([1-9]\d{0,2})[^\d])/,/^(?:(#{1,2}|n|b{1,2}))/,/^(?:[1-7])/,/^(?:,+|'+)/,/^(?:\.+)/,/^(?:( *- *){3})/,/^(?:( *- *))/,/^(?: *~)/,/^(?:[_])/,/^(?:=)/,/^(?:\.)/,/^(?:[0])/,/^(?:<)/,/^(?:>)/,/^(?:\()/,/^(?:\))/,/^(?:\/)/,/^(?:\\)/,/^(?:\|\])/,/^(?:\|\|)/,/^(?:\[\|)/,/^(?:\|:)/,/^(?::\|:)/,/^(?::\|)/,/^(?:\|)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:([\n\r]))/,/^(?:([ \t]))/,/^(?:$)/,/^(?:.)/],
conditions: {"time":{"rules":[8],"inclusive":false},"title":{"rules":[4,5,6],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = musje;
exports.Parser = musje.Parser;
exports.parse = function () { return musje.parse.apply(musje, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}