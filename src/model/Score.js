/* global musje */

(function (musje) {
  'use strict';

  /**
   * @class
   * @param {Object} score - plain score object {@link musje.PlainScore}.
   */
  musje.Score = function (score) {
    musje.extend(this, score);
    this.prepareTimewise();
    this.extractBars();
    this.prepareCells();
    this.linkTies();

    console.log(JSON.stringify(this, null, 2))
  };

  musje.defineProperties(musje.Score.prototype,
  /** @lends musje.Score.prototype */
  {
    /**
     * Head of the score.
     * @type {musje.ScoreHead}
     */
    head: {
      get: function () {
        return this._head || (this._head = new musje.ScoreHead());
      },
      set: function (head) {
        this._head = new musje.ScoreHead(head);
      }
    },
    /**
     * Partwise parts.
     * - (Getter)
     * - (Setter)
     * @type {Array.<musje.PartwisePart>}
     */
    parts: {
      get: function () {
        return this._parts || (this._parts = []);
      },
      set: function (parts) {
        this._parts = parts.map(function (part) {
          return new musje.PartwisePart(part);
        });
      }
    },

    /**
     * Timewise measures, generated by the initialize function.
     * @type {Array.<musje.TimewiseMeasure>}
     */
    measures: {
      get: function () {
        return this._measures || (this._measures = []);
      },
      set: function (measures) {
        this._measures = measures.map(function (measure) {
          return new musje.TimewiseMeasure(measure);
        });
      }
    },

    /**
     * Total numbers of measures.
     * @type {number}
     */
    totalMeasures: {
      get: function () {
        return this.measures.length;
      }
    },

    /**
     * Convert score to string.
     * @return {string} Musje source code.
     */
    toString: function () {
      return this.head + this.parts.map(function (part) {
        return part.toString();
      }).join('\n\n');
    },

    toJSON: musje.makeToJSON({
      head: undefined,
      parts: undefined
    }),

    /**
     * A cell is identically a measure in a part or a part in a measure.
     * @param  {Function}
     */
    walkCells: function (callback) {
      this.parts.forEach(function (part, p) {
        part.measures.forEach(function (cell, m) {
          callback(cell, m, p);
        });
      });
    },

    /**
     * Walk each music data.
     * @param  {Function} callback
     */
    walkMusicData: function (callback) {
      this.walkCells(function (cell, m, p) {
        cell.data.forEach(function (data, d) {
          callback(data, d, m, p);
        });
      });
    },

    /**
     * Prepare timewise data.
     */
    prepareTimewise: function () {
      var measures = this.measures;
      this.walkCells(function (cell, m) {
        measures[m] = measures[m] || new musje.TimewiseMeasure();
        measures[m].parts.push(cell);
      });
    },

    /**
     * Extract bars in each cell out into the measure.
     */
    extractBars: function () {
      var measures = this.measures;
      measures.forEach(function (measure, m) {
        measure.parts.forEach(function (cell) {
          var
            data = cell.data,
            len = data.length;
          if (!len) { return; }

          // barRight
          if (len && data[len - 1].$type === 'Bar') {
            measure.barRight = data.pop();
          }

          // barLeft
          if (data[0] && data[0].$type === 'Bar') {
            measure.barLeft = data.shift();
          } else {
            if (m !== 0) {
              measure.barLeft = measures[m - 1].barRight;
            }
          }
        });
      });
    },

    /**
     * Prepare cells
     */
    prepareCells: function () {
      this.walkCells(function (cell) {
        cell.data.forEach(function (data, d) {
          data.cell = cell;
          data.index = d;
        });
        cell.makeBeams(1);
      });
    },

    /**
     * Link ties for each {@link musje.Note} in the entire score.
     */
    linkTies: function () {
      var prev = null;

      this.walkMusicData(function (data) {
        var tie;

        if (data.$type === 'Note') {
          tie = data.duration.tie;
          data.duration.tie = {};
          if (prev) {
            /**
             * Previous tied note. Produced by {@link musje.Score#linkTies}.
             * @memberof musje.Duration#tie#
             * @alias prev
             * @type {(musje.Note|undefined)}
             */
            data.duration.tie.prev = prev;
            /**
             * Next tied note. Produced by {@link musje.Score#linkTies}.
             * @memberof musje.Duration##tie#
             * @alias next
             * @type {(musje.Note|undefined)}
             */
            prev.duration.tie.next = data;
          }
          prev = tie ? data : null;
        }
      });
    }

  });

}(musje));
